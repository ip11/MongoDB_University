QUIZ - OBJECTID

Problem:

How does the value of _id get assigned to a document?

Ans 1: It is automatically generated as an ObjectId type value.
Explanation: MongoDB by default creates a unique "_id" field while inserting a new document into a collection.
MongoDB does this in case a user doesn't assign a UNIQUE "_id" value to the object. 

Ans 2: You can select a non ObjectId type value when inserting a new document, as long as that value is unique to 
this collection.
Explanation: The "_id" can also be a non-ObjectId. As long as it is unique, the "_id" can be of any data type. 
__________________________________________________________________________________________________________________________

QUIZ - INSERT ERRORS

Problem:

Select all true statements from the following list:

Ans 1: MongoDB can store duplicate documents in the same collection, as long as their _id values are different.
Explanation: Duplication error doesn't occur until there are duplicate "_ids"

Ans 2: If a document is inserted without a provided _id value, then the _id field and value will be automatically 
generated for the inserted document before insertion.
Explanation: "_ids" are automatically generated by MongoDB if the user forgets to assign one. 
Additional rules can be placed on documents using MongoDB's schema validation functionality to ensure duplicates arent found.
__________________________________________________________________________________________________________________________

QUIZ - INSERT ORDER

Problem:

Which of the following commands will successfully insert 3 new documents into an empty pets collection?

Ans 1: db.pets.insert([{ "pet": "cat" }, { "pet": "dog" },{ "pet": "fish" }]) 
Explanation: The _id field is not specified, which means that it will be created for each automatically.

Ans 2: db.pets.insert([{ "_id": 1, "pet": "cat" },
        { "_id": 2, "pet": "dog" },{ "_id": 3, "pet": "fish" },{ "_id": 3, "pet": "snake" }])
Explanation: First two documents will be inserted successfully. While there is a duplicate key error between the "fish" 
and "snake" documents, As a result "fish" document will get inserted and the last one will create a duplicate key error.

Ans 3: db.pets.insert([{ "_id": 1, "pet": "cat" },
                { "_id": 1, "pet": "dog" },{ "_id": 3, "pet": "fish" },{ "_id": 4, "pet": "snake" }], { "ordered": false })
Explanation: This insert is unordered, which means that each document with a unique _id value will get inserted into the 
collection, which would make a total of 3 inserted documents.
__________________________________________________________________________________________________________________________

QUIZ - UPDATING DOCUMENTS

Problem:

MongoDB has a flexible data model, which means that you can have fields that contain documents, or arrays as their values.
Select any invalid MongoDB documents from the given choices:

Ans: None of the above
Explanation: All the documents presented in the choices are valid MongoDB documents since all follow JSON format and
the values of all the fields are of valid data types. 
__________________________________________________________________________________________________________________________

QUIZ - UPDATING DOCUMENTS IN THE SHELL

Problem:

Given a pets collection where each document has the following structure and fields:
Which of the following commands will add new fields to the updated documents?

Ans 1: db.pets.updateMany({ "pet": "cat" },{ "$set": { "type": "dangerous","look": "adorable" }})
Explanation: Fields "type" and "look" do not exist in the existing documents in the collection, so this command will 
create new fields with the given values for all documents that have the "pet" field equal to "cat"

Ans 2: db.pets.updateMany({ "pet": "cat" }, { "$push": { "climate": "continental","look": "adorable" } })
Explanation: While the "climate" field is already present in the documents in this collection, the field "look" is new, 
and this command will create a new array field called "look", with one element "adorable" in it.

__________________________________________________________________________________________________________________________

QUIZ 1 - DELETING DOCUMENTS

Problem:

The sample dataset contains a few databases that we will not use in this course. Clean up your Atlas cluster and get rid of all the collections in these databases:

sample_analytics
sample_geospatial
sample_weatherdata
Does removing all collections in a database also remove the database?

Ans: yes
Explanation: When all collections are dropped from a database, the database no longer appears in the list of databases
when you run show dbs.
__________________________________________________________________________________________________________________________

QUIZ 1 - DELETING DOCUMENTS

Problem:
Which of the following commands will delete a collection named villains?

Ans: db.villains.drop()
__________________________________________________________________________________________________________________________
